<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set local variables.
trofeo_end = false;
coins_end = false;
animar_completo = true;
contador = 0;

if(completo_objetivo) give_reward = true else give_reward = false

// Traduce.
if(idioma == "en"){
    txt = Traduce(
        "World " + string(nivel_selected),
        "Trophie",
        "Time",
        "Coins", 
        "Objectives",
        "You completed#the objective of this#level!",
        "You didn't completed#the objective of#this level!", 
        "No objectives#available in this#level!", 
        "Next!", 
        "Best Time: " + string(ds_grid_get(medallas_niveles, nivel_selected - 1, 1))
    );
}else if(idioma == "es"){
    txt = Traduce(
        "Mundo " + string(nivel_selected),
        "Trofeo",
        "Tiempo",
        "Monedas", 
        "Objectivos",
        "Has completado el#objetivo del nivel!",
        "No completaste#el objetivo del#nivel!", 
        "Ningun objetivo#disponible en este#nivel!", 
        "Seguir!", 
        "Mejor Tiempo: " + string(ds_grid_get(medallas_niveles, nivel_selected - 1, 1))
    );
}

// Set the x.
x = -sprite_get_width(spr_presentation);
with Home depth = Marco_Final.depth - 4;
with Reset depth = Marco_Final.depth - 4;

player_grid = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create reward coins.
if(contador_monedas &lt;= objective_reward){
    alarm[0] = 5;
}

var inst = instance_create(97, 325, Moneda_Reward);
with(inst){
    depth = Marco_Final.depth - 6;
    final_x = 434 - string_width(string(int64("000")))/2 - sprite_get_width(spr_monedas)/2;
    final_y = 275;
}
contador_monedas++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Mover a la derecha.
if(x &lt; 0){
    x += 100;
}else{
    x = 0;
    if(!instance_exists(Trofeo)){
        with(instance_create(x +64 + 155, 176, Trofeo)){
            depth = Marco_Final.depth - 1;
        }
        with(instance_create(0,0, Coins_Ganadas)){
            depth = Marco_Final.depth - 1;
        }
    }
}

// If the player completed the objective.
if(completo_objetivo and trofeo_end and coins_end and animar_completo){
    if(contador &gt; 30){
        if(!instance_exists(Level_Completed)){
            var inst = instance_create(0,0,Level_Completed);
            with(inst){
                depth = Marco_Final.depth - 5;
                text = "You completed the objective!";
            }
        }
        // animar_completo = false -- &gt; Set in th Level_Complete object.
    }else{
        contador++;
    }
}

// Give the reward.
if(give_reward and !animar_completo){
    var xs = 434 + 40 + 64;
    var ys = 275;

    global_monedas += objective_reward;
    local_monedas += objective_reward;
    inst = instance_create(xs, ys, rewardObject);
    with Coins_Ganadas {coins += objective_reward;}
    switch(objective_reward){
        case 30:
            with(inst){
                reward_amount = 30;
            }
        break;
        case 50:
            with(inst){
                reward_amount = 50;
            }
        break;
        case 100:
            with(inst){
                reward_amount = 100;
            }
        break;
        
        with(inst){
            depth = Marco_Final.depth - 6;
        }
    }
    give_reward = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the level settings.
draw_set_color(c_white);
//draw_set_font(font_divaro_niveles25);
draw_set_font(font_rayman_niveles18);

// Draw the frame.
draw_sprite(spr_presentation, 1, x, 0);

// Draw the number of the level.
var xs = x +64 + 311 - string_width(txt[0])/2;
var ys = 13 + y + string_height(txt[0]) * 2; 
draw_text_shadow(xs, ys, txt[0], c_white, c_black, 1);

// Draw "Trophies"
draw_text_shadow(x +64 + 180 - string_width(txt[1])/2, y + 138, txt[1], c_white, c_black, 1);

// Draw time.
var xs = x +64 + 90 + (string_width(txt[2]))/2 - sprite_get_width(spr_medal_bronce);
var time = string(time_meta) + 's';
draw_text_shadow(x +64 + 430 - string_width(txt[2])/2, y + 136, txt[2], c_white, c_black, 1);

switch(show_medalla){
    case 1:
        draw_set_color(make_color_rgb(231,115,75));
    break;
    case 2:
        draw_set_color(make_color_rgb(144,138,192));
    break;
    case 3:
        draw_set_color(c_yellow);
    break;
}

draw_text_shadow(x +64 + 430 - string_width(time)/2, y + 170, time, c_white, c_black, 1);
draw_line_width_colour(x +64 + 430 - string_width(time)/2 - 5, y + 172 + string_height(time), x +64 + 430 - string_width(time + 's')/2 + string_width(time + 's'), y + 172 + string_height(time), 2, c_white, c_white);
draw_set_color(c_white);

// Draw coins.
draw_text_shadow(x +64 + 430 - string_width(txt[3])/2, y + 236, txt[3], c_white, c_black, 1);


// Draw Objectives if they exists.
draw_text(x +64 + 180 - string_width(txt[4])/2, 279, txt[4]);
draw_set_font(font_rayman_niveles12);
if(objetivo != "noone"){ 
    if(!alreadycompleted){
        if(completo_objetivo){
            draw_text(x +64 + 89, 315, txt[5]);
        }else{
            draw_text(x +64 + 85, 320, txt[6]);
        }
    }else{
        draw_text(x +64 + 85, 320, txt[5]);
    }
}else{
   draw_text(x +64 + 97, 320, txt[7]);
}



/* Draw the top players.
if(player_grid){
    for(var i = 0; i &lt; 4; i++){
        var spr = ds_grid_get(player_info, i, 4);
    
        // Draw player's icon.
        if(spr != noone){
            draw_sprite(spr, 0, x, y);
        }
        
        // Draw player's rank.
        draw_text(x, y, ds_grid_get(player_info, i, 2));
        
        // Draw player's name.
        draw_text(x, y, ds_grid_get(player_info, i, 0));
        
        // Draw player's score.
        draw_text(x, y, ds_grid_get(player_info, i, 3));
   
   }
} */

var can_click = !give_reward and trofeo_end and coins_end;

// Draw start buttom.
if(!in_Rectangle(336, 348,55+ 336+sprite_get_width(spr_boton_pres), 348 + sprite_get_height(spr_boton_pres))){
    draw_sprite(spr_boton_pres, 0, x +64 + 336, 348); 
    draw_set_font(font_rayman_niveles18);   
    if(idioma == "en"){
        draw_text(x +64 + 318 + string_width("Next!"),  348 + 10, txt[8]);
    }else{
        draw_text(x + 320 + string_width("Siguiente!") - 40, 360, txt[8]);
    }
}else{
    draw_sprite(spr_boton_pres, 1, x +64 +336, 348);
    draw_set_font(font_rayman_niveles);
    if(idioma == "en"){
        draw_text(x + 64 + 320 + string_width("Next!") - 40, 355, txt[8]);
    }else{
        draw_text(x  + 240 + string_width("Siguiente!") - 40, 355, txt[8]);
    }
    if(mouse_check_button_released(mb_left) and can_click){
        audio_play_sound(sn_boton_start, 1, 0);
        nivel_selected += 1;
        if(nivel_selected &lt;= show_levels){
            room_goto_transition(Room_Loading, 0);
        }else{
            var inst = instance_create(0,0, Level_Completed);
            with(inst){
                audio_play_sound(sn_winlevel, 1, 0);
                depth = Trofeo.depth - 1;
                if(idioma == "en"){
                    text = "Keep Calm! New levels this Saturday!";
                }else if(idioma == "es"){
                    text = "Vamo a calmarno! Nuevos niveles este sabado!";
                }
            }
        }
    }
}

// Draw the last time.
/*switch(Compare_Times(medallas_niveles, nivel_selected - 1, 1)){
    case 3:
        draw_set_color(c_yellow);
    break;
    case 2:
        draw_set_color(make_color_rgb(231, 115, 75));
    break;
    case 1:
        draw_set_color(make_color_rgb(148, 134, 198));
    break;
}
*/

/// Draw best time.
draw_set_font(font_rayman_niveles15)
draw_text(room_width/2 - string_width(txt[9])/2, room_height - string_height(txt[9]) - 20, txt[9]);


/*
show_debug_message('mouse_x: ' + string(mouse_x));
show_debug_message('mouse_y: ' + string(mouse_y));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
