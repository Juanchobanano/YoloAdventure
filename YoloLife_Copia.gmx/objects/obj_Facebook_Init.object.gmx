<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>permissions = ds_list_create();                     // A ds_list to hold all possible permissions. MUST be used, even if no permissions are to be sent
if(os_is_network_connected()){
    facebook_init();                                    // Initialise Facebook
    //global.Auth = false;                                // Control variable
    global.AskedForLogin = false;                       // Login control for HTML5
    ds_list_add(permissions,"public_profile");          // Add the permissions to the list. If no permissions are necessary this is not necessary
    alarm[0] = 1;                                       // Set an alarm to check the login status
}else{
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(permissions);       // Remove the ds_list from memory

var request = "publish_actions";
if !facebook_check_permission(request){
    var permissions = ds_list_create();
    ds_list_add(permissions, request);
    request_ID = facebook_request_publish_permissions(permissions);
    ds_list_destroy(permissions);
}


if global.Auth
{
    wallPostMap = ds_map_create();                                                          //Create a ds_map that holds the details used to create the wall post
    ds_map_add(wallPostMap, "message", "Finalmente un juego lleno de retos! DEAD'FISH es un nuevo ARCADE súmamente complicado y divertido!");   //The content message of the post
    ds_map_add(wallPostMap, "picture", "http://thumbs.subefotos.com/f9efcda39ec739e9427ffb1acc74cfc5o.jpg");               //An image link that is to accompany the post
    ds_map_add(wallPostMap, "link", "http://play.google.com/store/apps/details?id=com.Fa_Dielle.DeadFish");                           //The link that the "Name" will direct you to when clicked
    //ds_map_add(wallPostMap, "name", "DEAD'FISH Disponible en Google Play!");                //The post name
    //ds_map_add(wallPostMap, "caption", "mcsweenygames.com");                                //The post caption
    //ds_map_add(wallPostMap, "description", "DEAD'FISH es un nuevo ARCADE súmamente complicado y divertido!");  //Post description
    facebook_graph_request("me/feed", "POST", wallPostMap, -1);                             //Send of the graph request
    ds_map_destroy(wallPostMap);     
    show_message('Gracias por compartir DEAD FISH en facebook!');
                                                           //Destroy the ds_grid
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Check the Facebook status and set a global variable
var fbStatus;
fbStatus = facebook_status();                                       // Get the Facebook status
show_debug_message( "facebook status: " + fbStatus );
switch (fbStatus)                                          
{
case "AUTHORISED":                                                  //Facebook authorised!
  // show_message('Successs');
    global.Auth = true; 
    instance_destroy(); 
    break;   
case "IDLE":   
   // show_message('IDLE');                                                     //facebook initialised - ready to login  
    facebook_login(permissions, fb_login_default); 
    global.AskedForLogin=true;
    alarm[0] = 30; 
    break;   
case "FAILED":                                                      //Failure in the connection, so try again...
   // show_message('FAILED');
    facebook_login(permissions, fb_login_default);  
    global.AskedForLogin=true;  
    alarm[0] = 30; 
    break;   
case "DENIED":              
  //  show_message('DENIED');                                        //We have not granted permissions to our facebook app
    if !global.AskedForLogin
        {                                                           //login and ask for permissions if we have not already done so
        facebook_login(permissions, fb_login_default); alarm[0] = 30;      
        global.AskedForLogin = true;                         
        }
    else
        {
        instance_destroy();                                         //Denied, probably because the user as not given permission.
        }
    break;
    
default: alarm[0] = 30;                                             //None of the above options, so repeat the alarm until we have a result
}






</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
