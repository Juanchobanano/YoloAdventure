<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_puerta</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-4</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set local variables.
globalvar time_meta;
time_meta = 0;
spd = 0;

globalvar muertes, local_monedas;
muertes = 0;
local_monedas = 0;

image_index = 0;
image_speed = 0;

end_level = false;
go = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Go to the other room.
room_goto_transition(Room_End, 11, 20);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change the audio.
if(!audio_is_playing(audio)){
   if(audio == sn_mainsoundtrack1){
        audio = sn_mainsoundtrack2;
    }else if(audio == sn_mainsoundtrack2){
        audio = sn_mainsoundtrack3;
    }else if(audio == sn_mainsoundtrack3){
        audio = sn_mainsoundtrack1;
    }
    audio_play_sound(audio, 1, 0);
    audio_sound_gain(audio, 0, 0);
    audio_sound_gain(audio, 1, 4000);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Per">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// The player has finished the level.
image_speed = spd;
spd += .05;


if(!end_level){
    // Return a medal, and if it is different from what already exists in
    // the grid, increase 1 the achievement.
    show_medalla = Compare_Times(time_meta, nivel_selected - 1);
    //show_debug_message('show_medalla: ' + string(show_medalla));
    if(show_medalla == 3 and show_medalla != ds_grid_get(medallas_niveles, nivel_selected - 1, 0)){
        Increase_Amount("Get the gold trophy in 15#different levels!", 1);
    }
    
    // Save the medal and the time if it is necessary.
    Save_Medal(show_medalla, time_meta);
    
    // Check if the player completed the objective.
    completo_objetivo = Check_Objectives(nivel_selected - 1);
    if(completo_objetivo){
        Increase_Amount("Complete 5 objectives!", 1);
    }
    
    /// Play the win sound!
    audio_sound_gain(audio, .3, 1);
    audio_play_sound(sn_winlevel, 1, 0);
    audio_play_sound(sn_aplausos, 1, 0);
    audio_sound_gain(sn_aplausos, .5, 1);
    end_level = true;
    
    with(Per) depth = Meta.depth - 1;
}


//show_debug_message(completo_objetivo);

//nivel_selected += 1;
//room_goto(asset_get_index('game' + string(nivel_selected)));

/*
 false: Return false if the player did't complete the objective or if he already completed it.
 true: Return true if the player compelted the objective and he hasn't copmpelted it before.
*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Animation End Properties.
image_speed = 0;
image_index = 3;
with(Per){
    state = Pause;
}

if(!instance_exists(Level_Completed)){
    with(instance_create(0, -sprite_get_width(spr_marco_win), Level_Completed)){
        if(idioma == "en"){
            text = "You have completed the level!";
        }else if(idioma == "es"){
            text = "Has completado el nivel!"
        }
    }
}

/*if(go){
    alarm[0] = 5;
    go = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw time, objective and amount and keys.
draw_self();

var color = c_white; //make_color_rgb(51,51,51);
draw_set_color(color);
//draw_set_font(font_tiempo);

draw_set_font(font_rayman_niveles15);

// Draw fps.
//draw_text(0, room_height - string_height(string(fps)), string(fps));

var xs = view_xview + 768 - string_width(string(time_meta)) - 20;
var yplus = string_height(string(time_meta));
var ys = 20 + yplus + 2;

// If the player hasn't ended the level.
if(!end_level){
 
    // Draw Time.
    draw_text(xs, 20, string(time_meta));
    draw_set_color(c_white);
    draw_line_width_colour(xs, ys, xs + string_width(string(time_meta)), ys, 2, color, color);
    time_meta += 1/30;
    
    // Draw coins.
    draw_set_color(c_yellow);
    draw_set_font(font_rayman_niveles15);
    
    var xs = 638;
    draw_sprite(spr_monedas, 0, xs, 20);
    draw_text(xs - string_width(string(global_monedas)) - 3, 20, string(global_monedas));
    
    // Draw the objectives.
    Draw_Objectives();

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
