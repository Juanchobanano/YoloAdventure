<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cargar todos los objetos y variables del nivel.
x = -sprite_get_width(spr_presentation);
derecha = true;

// Cargar jugadores de éste nivel y estrellas.
achievement_load_leaderboard("40tg23r438grejg", 1, 3, achievement_filter_all_players);

// Clean the grid.
ds_grid_clear(player_info, 0);

// Set the stars.
medallas = ds_list_find_value(medallas_niveles, nivel_selected - 1);

// Objectives variables.
globalvar cantidad, objetivo, objeto;
cantidad = 0;
objetivo = "";
objeto = noone;

// Get the value of the grid and analyze it.
pickup = false;
map = ds_grid_get(level_object, nivel_selected - 1, 0);
if(map != -1) Get_Objectives(map);

// Player Grid Define.
player_grid = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create world instances.
instance_create(0,0, Control_World);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Mover a la derecha.


// Subir.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Retorna la naturaleza del evento asíncrono y lo evalua.
var ident = ds_map_find_value(async_load, "id");

// Arreglo con la información de los jugadores.
if (ident == achievement_leaderboard_info)
{
    var lbid = ds_map_find_value(async_load,"leaderboardid");
    if(lbid == "CgkIs9_51u0PEAIQBw" || lbid == "leaderboard1id")
    {
       var numentries = ds_map_find_value(async_load,"numentries");
       for(var i = 0; i &lt; numentries; i++)
       {
          ds_grid_add(player_info, i, 0, ds_map_find_value(async_load, "Player" + string(i)));
          ds_grid_add(player_info, i, 1, ds_map_find_value(async_load, "Playerid" + string(i)));
          ds_grid_add(player_info, i, 2, ds_map_find_value(async_load, "Rank" + string(i)));
          ds_grid_add(player_info, i, 3, ds_map_find_value(async_load, "Score" + string(i)));
          achievement_get_pic(ds_grid_get(player_info, i, 1));
       }
    }
}


// Arreglo con el sprite del jugador.
if (ident == achievement_pic_loaded)
{
    var picid = ds_map_find_value(async_load, "playerid");
    var spriteid = ds_map_find_value(async_load, "spriteid");
    
    for(var i = 0; i &lt; 3; i++){
        if(picid == ds_grid_get(player_info, i, 1)){
            ds_grid_add(player_info, i, 4, spriteid);
        }
    }
    player_grid = true;  
} 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the level settings.

// Draw the frame.
draw_sprite(sprite, 0, 0, 0);

// Draw the medal.
draw_sprite(sprite2, medallas, 0, 0);

// Draw Objectives if they exists.
if(map != 1){ Set_Objectives(objetivo, cantidad, objeto, ds_grid_get(level_object, nivel_selected, 1)); }

// Draw the times.
Draw_Times(nivel_selected);

// Draw the top players.
if(player_grid){
    for(var i = 0; i &lt; 4; i++){
        var spr = ds_grid_get(player_info, i, 4);
    
        // Draw player's icon.
        if(spr != noone){
            draw_sprite(spr, 0, x, y);
        }
        
        // Draw player's rank.
        draw_text(x, y, ds_grid_get(player_info, i, 2));
        
        // Draw player's name.
        draw_text(x, y, ds_grid_get(player_info, i, 0));
        
        // Draw player's score.
        draw_text(x, y, ds_grid_get(player_info, i, 3));
   
   }
} 


// Draw the start buttom.
/*
if(!in_Rectangle()){
    draw_sprite(boton, 0, xx, yy);

// If the player pressed the buttom.
}else if(in_Rectangle() and mouse_check_button_pressed(mb_left)){
    draw_sprite(boton, 1, xx, yy);
    
// If the player released the buttom.
}else if(in_Rectangle() and mouse_check_button_released(mb_left)){
    draw_sprite(boton, 0, xx, yy);
    retroceder = true;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
